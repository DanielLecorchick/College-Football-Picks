<!-- not complete yet, fetches the top 25 teams from one ESPN API, then pulls game data for those top 25 teams from a seperate ESPN API  --> 
<!DOCTYPE html>
<html lang = "en">
<head>
    <meta charset = "UTF-8">
    <meta name = "viewport" content = "width = device-width, initial-scale = 1.0">
    <title>Picks</title>
    <link rel="stylesheet" href="/css/picks.css">
</head>
<body>
    <div id="header">
        <h1>Picks</h1>
    </div>
    <div id = "Picks">
    <script>
        async function fetchGames() {
            try{
                // pulls all the top 25 teams and ranking data from the rankings API
                const rankingsResponse = await fetch("https://site.api.espn.com/apis/site/v2/sports/football/college-football/rankings")
                const rankingsData = await rankingsResponse.json()
                const top25Teams = rankingsData.rankings[0].ranks.map(rank => rank.team.id)

                // pulls the start and end date of the week 
                const season = rankingsData.rankings[0].season
                const startOfWeek = new Date(season.startDate)
                const endOfWeek  = new Date(season.endDate)

                // pulls game data such as match ups and times of games from the scorecoard API
                const gamesResponse = await fetch("https://site.api.espn.com/apis/site/v2/sports/football/college-football/scoreboard")
                const gamesData = await gamesResponse.json()

                const currentWeek = gamesData.week.number
                const isWeek15 = currentWeek === 15

                renderGames(gamesData, top25Teams, startOfWeek, endOfWeek, isWeek15)
            }
            catch (error){
                console.error("Error fetching data:", error)
            }
        }


        function renderGames(gamesData, top25Teams, startOfWeek, endOfWeek, isWeek15) {
            //variable to store each of the games
            const filteredGames = []

            gamesData.events.forEach(game => {
                //pulls data from each game for the Date, Home, and Away team
                const gameDate = new Date(game.date)
                const homeTeam = game.competitions[0].competitors.find(competitor => competitor.homeAway === "home")
                const awayTeam = game.competitions[0].competitors.find(competitor => competitor.homeAway === "away")

                // logic to filter out games. during the regular season ensure the game includes at least one top 25 matchup and is the current week, 
                // includes all conference championship games regardless of ranking, 
                // includes the Army vs Navy Game regardless of ranking,
                // includes all bowl games and college football playoff games, but excludes any FCS games
                const isTop25Game = top25Teams.includes(homeTeam.team.id) || top25Teams.includes(awayTeam.team.id)
                const isThisWeek = gameDate >= startOfWeek && gameDate <= endOfWeek
                const isConferenceChampionship = (isWeek15 && gameDate >= startOfWeek && gameDate <= endOfWeek)
                const isArmyNavy = (homeTeam.team.name === "Army" && awayTeam.team.name === "Navy") || (homeTeam.team.name === "Navy" && awayTeam.team.name === "Army")
                const isBowlOrCFP = game.season.type === 3
                const isFCSGame = game.competitions[0].notes.some(note => note.headline === "FCS Championship") || game.competitions[0].notes.some(note => note.headline === "FCS Championship - Semifinals")

                if (isFCSGame) return 
                
                if ((isTop25Game && isThisWeek) || isConferenceChampionship || isArmyNavy || isBowlOrCFP) {
                    filteredGames.push({gameDate, homeTeam, awayTeam, game})
                }
            })

            //sorts the filtered games according to the date the occur
            filteredGames.sort((a, b) => a.gameDate - b.gameDate)

            const picksDiv = document.getElementById("Picks")
            picksDiv.innerHTML = ""

            // creates a button for each home and away team,as well as the details, along with text underneath for the game date and time
            filteredGames.forEach(({ gameDate, homeTeam, awayTeam, game }) => {
                const gameContainer = document.createElement("div")
                gameContainer.classList.add("game-container")

                const generateTeamButton = (team, imgUrl, size) => {
                    const teamButton = document.createElement("button")
                    const teamImg = document.createElement("img")
                    teamImg.src = team.team.logo
                    teamImg.alt = team.team.displayName
                    teamImg.style.width = size
                    teamButton.appendChild(teamImg)

                    const teamText = document.createElement("span")
                    if (top25Teams.indexOf(team.team.id) != -1) {
                        teamText.textContent += `#${top25Teams.indexOf(team.team.id) + 1} `
                    }
                    teamText.textContent += team.team.displayName
                    teamButton.appendChild(teamText)
                    return teamButton
                }

                const homeTeamButton = generateTeamButton(homeTeam, homeTeam.team.logo, "100px")
                const awayTeamButton = generateTeamButton(awayTeam, awayTeam.team.logo, "100px")
                homeTeamButton.classList.add("team-button")
                awayTeamButton.classList.add("team-button")
                
                const winColor = `rgb(144, 238, 144)`
                const lossColor = `rgb(240, 128, 128)`
                const pressColor = `rgb(150, 150, 150)`
                const unpressedColor = `rgb(233, 233, 237)`
                if (game.status.type.state !== "pre") {
                    homeTeamButton.disabled = true
                    awayTeamButton.disabled = true
                    if(homeTeam.winner) {
                        homeTeamButton.style.backgroundColor = winColor
                        awayTeamButton.style.backgroundColor = lossColor
                    }
                    else {
                        homeTeamButton.style.backgroundColor = lossColor
                        awayTeamButton.style.backgroundColor = winColor
                    }
                }

                homeTeamButton.onclick = async () => {
                    homeTeamButton.style.backgroundColor = pressColor
                    awayTeamButton.style.backgroundColor = unpressedColor
                    homeTeamButton.disabled = true
                    awayTeamButton.disabled = false
                    await PickSelection(game.id, "homeTeam")
                }

                awayTeamButton.onclick = async () => {
                    awayTeamButton.style.backgroundColor = pressColor
                    homeTeamButton.style.backgroundColor = unpressedColor
                    homeTeamButton.disabled = false
                    awayTeamButton.disabled = true
                    await PickSelection(game.id, "awayTeam")
                }

                const detailsButton = document.createElement("button")
                detailsButton.textContent = "See Details"
                detailsButton.onclick = () => {
                    localStorage.setItem("homeTeam", JSON.stringify(homeTeam))
                    localStorage.setItem("awayTeam", JSON.stringify(awayTeam))
                    window.location.href = `/details?homeTeamID=${homeTeam.team.id}&awayTeamID=${awayTeam.team.id}`
                }

                const dateDiv = document.createElement("div")
                dateDiv.textContent = `Game Time: ${gameDate.toLocaleString()}`

                const vsSpan = document.createElement("span")
                vsSpan.textContent = "vs"
                vsSpan.classList.add("vs-text")

                const middleDiv = document.createElement("div")
                middleDiv.className = "middle-div"
                middleDiv.appendChild(vsSpan)
                middleDiv.appendChild(detailsButton)

                gameContainer.appendChild(homeTeamButton)
                gameContainer.appendChild(middleDiv)
                gameContainer.appendChild(awayTeamButton)

                dateDiv.appendChild(gameContainer)
                picksDiv.appendChild(dateDiv)
                picksDiv.appendChild(document.createElement("br"))
            })

            console.log(filteredGames)
        }

        //function to send the users pick to the database or update their pick to the database
        async function PickSelection(pickGameID, homeAwayPick) {
            const response = await fetch("/picks", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify({
                    gameId: pickGameID, 
                    pick: homeAwayPick, 
                })
            })
        }

        // every 10 minutes the functions are run to pull the data and ensure the games are correct this will be used to lock out users from making picks after game start
        fetchGames()
        setInterval(fetchGames, 600000)
    </script>
    </div>
</body>
</html>