<!DOCTYPE html>
<html lang = "en">
<head>
    <meta charset = "UTF-8">
    <meta name = "viewport" content = "width = device-width, initial-scale = 1.0">
    <title>Picks</title>
    <link rel="stylesheet" href="/css/picks.css">
    <link rel="stylesheet" href="/css/shared-styles.css">
</head>
<body>
    <%- include('header', { headText: '<head-text id = "headerText">Picks</head-text>' }) %>
    <div id = "Picks">
    <script>
        async function fetchGames() {
            try{
                // pulls all the top 25 teams and ranking data from the rankings API
                const rankingsResponse = await fetch("https://site.api.espn.com/apis/site/v2/sports/football/college-football/rankings")
                const rankingsData = await rankingsResponse.json()
                const top25Teams = rankingsData.rankings[0].ranks.map(rank => rank.team.id)

                // pulls the start and end date of the week 
                const season = rankingsData.rankings[0].season
                const startOfWeek = new Date(season.startDate)
                const endOfWeek  = new Date(season.endDate)

                // pulls game data such as match ups and times of games from the scorecoard API
                const gamesResponse = await fetch("https://site.api.espn.com/apis/site/v2/sports/football/college-football/scoreboard")
                const gamesData = await gamesResponse.json()
                console.log(gamesData)

                const currentWeek = gamesData.week.number
                const isWeek15 = currentWeek === 15

                const headerText = document.getElementById("headerText")
                headerText.textContent = `Week ${currentWeek} Picks`

                renderGames(gamesData, top25Teams, startOfWeek, endOfWeek, isWeek15)
            }
            catch (error){
                console.error("Error fetching data:", error)
            }
        }

        function hexToRgb(hex) {
            // Convert hex to RGB
            let r = parseInt(hex.slice(0, 2), 16)
            let g = parseInt(hex.slice(2, 4), 16)
            let b = parseInt(hex.slice(4, 6), 16)

            return { r, g, b }
        }

        function checkColorSimilarity(homeTeamColor, awayTeamColor, awayTeamAltColor) {
            const homeRgb = hexToRgb(homeTeamColor)
            const awayRgb = hexToRgb(awayTeamColor)

            const distance = Math.sqrt(
                Math.pow(awayRgb.r - homeRgb.r, 2) +
                Math.pow(awayRgb.g - homeRgb.g, 2) +
                Math.pow(awayRgb.b - homeRgb.b, 2)
            )

            // If the distance is below a threshold, colors are too similar
            const threshold = 50
            if (distance < threshold) {
                // Reassign away team color to altColor
                return awayTeamAltColor
            }

            return awayTeamColor
        }

        //function to get the users picks from the database
        async function userPicks(){
            try{
                const response = await fetch('/api/picks')
                const userPicks = await response.json()
                return userPicks
            }
            catch(error) {
                console.error("Error fetching picks in userPicks:", error)
            }
        }


        //function to get the game pick data from the database
        async function gamePickData() {
            try{
                const response = await fetch ('/api/gameData')
                const gamePickData = await response.json()
                return gamePickData
            }
            catch(error){
                console.error("Error loading in game pick data:", error)
            }
        }


        async function renderGames(gamesData, top25Teams, startOfWeek, endOfWeek, isWeek15) {
        
            //gathers the users picks from the picks api
            const userPicksData = await userPicks()
            console.log(userPicksData)

            //gathers the game picks info from the game data api
            const gamePickInfo = await gamePickData()
            console.log(gamePickInfo)

            //variable to store each of the games
            const filteredGames = []

            gamesData.events.forEach(game => {
                //pulls data from each game for the Date, Home, and Away team
                const startDate = new Date(game.date)
                const formattedDate = startDate.toLocaleString("en-US", {
                    year: "numeric",
                    month: "2-digit",
                    day: "2-digit",
                    hour: "2-digit",
                    minute: "2-digit",
                    hour12: true,
                })
                var gameDate = formattedDate.replace(/(\b0)(\d{1}):/, "$2:")
                if(offseason && gameDate.substring(12) === "12:00 AM") {
                    gameDate = gameDate.substring(0, 12) + "Time TBA"
                }
                const homeTeam = game.competitions[0].competitors.find(competitor => competitor.homeAway === "home")
                const awayTeam = game.competitions[0].competitors.find(competitor => competitor.homeAway === "away")

                // logic to filter out games. during the regular season ensure the game includes at least one top 25 matchup and is the current week, 
                // includes all conference championship games regardless of ranking, 
                // includes the Army vs Navy Game regardless of ranking,
                // includes all bowl games and college football playoff games, but excludes any FCS games
                const isTop25Game = top25Teams.includes(homeTeam.team.id) || top25Teams.includes(awayTeam.team.id)
                const isThisWeek = gameDate >= startOfWeek && gameDate <= endOfWeek
                const isConferenceChampionship = (isWeek15 && gameDate >= startOfWeek && gameDate <= endOfWeek)
                const isArmyNavy = (homeTeam.team.name === "Army" && awayTeam.team.name === "Navy") || (homeTeam.team.name === "Navy" && awayTeam.team.name === "Army")
                const isBowlOrCFP = game.season.type === 3
                const isFCSGame = game.competitions[0].notes.some(note => note.headline === "FCS Championship") || game.competitions[0].notes.some(note => note.headline === "FCS Championship - Semifinals")

                //skips fcs games
                if (isFCSGame) return 
                
                //puts all the games that meet the requirements into one local variable
                if ((isTop25Game && isThisWeek) || (isTop25Game && offseason) || isConferenceChampionship || isArmyNavy || isBowlOrCFP) {
                    filteredGames.push({startDate, gameDate, homeTeam, awayTeam, game})
                }
            })

            //sorts the filtered games according to the date the occur
            filteredGames.sort((a, b) => a.startDate - b.startDate)

            const picksDiv = document.getElementById("Picks")
            picksDiv.innerHTML = ""
            // creates a button for each home and away team,as well as the details, along with text underneath for the game date and time
            filteredGames.forEach(({ startDate, gameDate, homeTeam, awayTeam, game }) => {
                const gameContainer = document.createElement("div")
                gameContainer.classList.add("game-container")

                const generateTeamButton = (team, imgUrl, size) => {
                    const teamButton = document.createElement("button")
                    const teamImg = document.createElement("img")
                    teamImg.src = team.team.logo
                    teamImg.alt = team.team.displayName
                    teamImg.style.width = size
                    teamButton.appendChild(teamImg)

                    const teamText = document.createElement("span")
                    if (top25Teams.indexOf(team.team.id) != -1) {
                        teamText.textContent += `#${top25Teams.indexOf(team.team.id) + 1} `
                    }
                    teamText.textContent += team.team.displayName
                    teamButton.appendChild(teamText)
                    return teamButton
                }

                const homeTeamButton = generateTeamButton(homeTeam, homeTeam.team.logo, "100px")
                const awayTeamButton = generateTeamButton(awayTeam, awayTeam.team.logo, "100px")
                homeTeamButton.classList.add("team-button")
                awayTeamButton.classList.add("team-button")
                
                const winColor = `rgb(144, 238, 144)`
                const lossColor = `rgb(240, 128, 128)`
                const pressColor = `rgb(175, 175, 175)`
                const unpressedColor = `rgb(233, 233, 237)`

                //logic for if a game is in progress
                if (game.status.type.state === "in") {
                    homeTeamButton.disabled = true
                    awayTeamButton.disabled = true
                }
                
                //logic for if a game has happened
                if (game.status.type.state === "post") {
                    homeTeamButton.disabled = true
                    awayTeamButton.disabled = true
                    if(homeTeam.winner) {
                        homeTeamButton.style.backgroundColor = winColor
                        awayTeamButton.style.backgroundColor = lossColor
                    }
                    else {
                        homeTeamButton.style.backgroundColor = lossColor
                        awayTeamButton.style.backgroundColor = winColor
                    }
                }
                
                //logic for if a user already has made a pick on this game before
                const userPick = userPicksData.find(pick => pick.gameId.toString() === game.id.toString())
                if(userPick){
                    if(userPick.pick ==="homeTeam"){
                        homeTeamButton.style.backgroundColor = pressColor
                        awayTeamButton.style.backgroundColor = unpressedColor
                        homeTeamButton.disabled = true
                        awayTeamButton.disabled = false
                    }
                    else if(userPick.pick ==="awayTeam"){
                        awayTeamButton.style.backgroundColor = pressColor
                        homeTeamButton.style.backgroundColor = unpressedColor
                        homeTeamButton.disabled = false
                        awayTeamButton.disabled = true
                    }
                    
                }
                
                //onclick logic for when a user chooses a team if its the home team button
                homeTeamButton.onclick = async () => {
                    homeTeamButton.style.backgroundColor = pressColor
                    awayTeamButton.style.backgroundColor = unpressedColor
                    homeTeamButton.disabled = true
                    awayTeamButton.disabled = false
                    await PickSelection(game.id, "homeTeam")
                }

                //onclick logic for when a user chooses a team if its the away team button
                awayTeamButton.onclick = async () => {
                    awayTeamButton.style.backgroundColor = pressColor
                    homeTeamButton.style.backgroundColor = unpressedColor
                    homeTeamButton.disabled = false
                    awayTeamButton.disabled = true
                    await PickSelection(game.id, "awayTeam")
                }

                const detailsButton = document.createElement("button")
                detailsButton.textContent = "See Details"
                detailsButton.onclick = () => {
                    localStorage.setItem("homeTeam", JSON.stringify(homeTeam))
                    localStorage.setItem("awayTeam", JSON.stringify(awayTeam))
                    window.location.href = `/details?homeTeamID=${homeTeam.team.id}&awayTeamID=${awayTeam.team.id}`
                }

                const dateDiv = document.createElement("div")
                dateDiv.className = "date-div"
                dateDiv.textContent = `Game Time: ${gameDate.toLocaleString()}`

                const vsSpan = document.createElement("span")
                vsSpan.textContent = "vs"
                vsSpan.classList.add("vs-text")

                const middleDiv = document.createElement("div")
                middleDiv.className = "middle-div"
                middleDiv.appendChild(vsSpan)
                middleDiv.appendChild(detailsButton)

                gameContainer.appendChild(homeTeamButton)
                gameContainer.appendChild(middleDiv)
                gameContainer.appendChild(awayTeamButton)

                dateDiv.appendChild(gameContainer)

                const fullGameDiv = document.createElement("div")
                fullGameDiv.className = "full-game-div"

                const homeTeamColor = homeTeam.team.color
                const awayTeamColor = checkColorSimilarity(homeTeamColor, awayTeam.team.color, awayTeam.team.alternateColor)

                const currentGamePickInfo = gamePickInfo.find(gamePick => gamePick.gameId === game.id)
                
                const homePercentage = ((currentGamePickInfo.homePicks / currentGamePickInfo.totalPicks) * 100).toFixed(0);
                const awayPercentage = ((currentGamePickInfo.awayPicks / currentGamePickInfo.totalPicks) * 100).toFixed(0);

                const homePercentText = document.createElement("span")
                homePercentText.textContent = `${homePercentage}%`
                const totalPicksText = document.createElement("total-picks")
                totalPicksText.textContent = `Total Picks: ${currentGamePickInfo.totalPicks}`
                const awayPercentText = document.createElement("span")
                awayPercentText.textContent = `${awayPercentage}%`

                const teamPercentsDiv = document.createElement("div")
                teamPercentsDiv.className = "team-percents"
                teamPercentsDiv.appendChild(homePercentText)
                teamPercentsDiv.appendChild(totalPicksText)
                teamPercentsDiv.appendChild(awayPercentText)

                const picksBar = document.createElement("div")
                picksBar.className = "picks-bar"
                
                const homeSection = document.createElement("div")
                homeSection.className = "picks-bar-home"
                homeSection.style.width = `${homePercentage}%`
                homeSection.style.backgroundColor = `#${homeTeamColor}`

                const awaySection = document.createElement("div")
                awaySection.className = "picks-bar-away"
                awaySection.style.width = `${awayPercentage}%`
                awaySection.style.backgroundColor = `#${awayTeamColor}`

                if (homePercentage !== "100" && awayPercentage !== "100") {
                    homeSection.style.borderRight = "1px solid #000"
                }

                picksBar.appendChild(homeSection)
                picksBar.appendChild(awaySection)

                fullGameDiv.appendChild(dateDiv)
                fullGameDiv.appendChild(teamPercentsDiv)
                fullGameDiv.appendChild(picksBar)
                
                picksDiv.appendChild(fullGameDiv)
                picksDiv.appendChild(document.createElement("br"))
            })
        }

        //function to send the users pick to the database or update their pick to the database
        async function PickSelection(pickGameID, homeAwayPick) {
            const response = await fetch("/picks", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify({
                    gameId: pickGameID, 
                    pick: homeAwayPick, 
                })
            })
            if(response.ok) {
                const updatedPicks = await userPicks()
            }
        }

        const currentYear = new Date().getFullYear()
        const january20th = new Date(currentYear, 0, 20)

        // calculate Labor Day (first monday of september)
        const september1st = new Date(currentYear, 8, 1)
        const laborDay = new Date(september1st.getTime() + ((1 - september1st.getDay() + 7) % 7) * 24 * 60 * 60 * 1000)

        // check if it is currently the offeason so we can display the first games of next season
        const currentDate = new Date()
        const offseason = currentDate >= january20th && currentDate <= laborDay;

        // every 10 minutes the functions are run to pull the data and ensure the games are correct this will be used to lock out users from making picks after game start
        fetchGames()
        setInterval(fetchGames, 40000)
    </script>
    </div>
</body>
</html>