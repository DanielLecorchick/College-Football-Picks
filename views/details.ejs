<!DOCTYPE html>
<html lang = "en">
<head>
    <meta charset = "UTF-8">
    <meta name = "viewport" content = "width = device-width, initial-scale = 1.0">
    <title>Game Details</title>
    <link rel="stylesheet" href="/css/details.css">
</head>
<body>
    <div class="details">
        <div class="left"></div>
        <div class="right"></div>
        <script>
            async function fetchTop25() {
                try{
                    // pulls all the top 25 teams and ranking data from the rankings API
                    const rankingsResponse = await fetch("https://site.api.espn.com/apis/site/v2/sports/football/college-football/rankings")
                    const rankingsData = await rankingsResponse.json()
                    const top25Teams = rankingsData.rankings[0].ranks.map(rank => rank.team.id)

                    // pulls game data such as match ups and times of games from the scorecoard API
                    //filepath to leaders = object/events/0/competitions/0/leaders
                    const gamesResponse = await fetch("https://site.api.espn.com/apis/site/v2/sports/football/college-football/scoreboard")
                    const gamesData = await gamesResponse.json()
                    console.log(gamesData)
                    createDisplay(top25Teams, gamesData)
                }
                catch (error){
                    console.error("Error fetching data:", error)
                }
            }

            function createDisplay(top25Teams, gamesData) {
                // Set the webpage title and header
                var homeTitle = ""
                if (top25Teams.indexOf(homeTeam.team.id) != -1) {
                    homeTitle += "#" + (top25Teams.indexOf(homeTeam.team.id)+1) + " "
                }
                homeTitle += homeTeam.team.displayName
                
                var awayTitle = ""
                if (top25Teams.indexOf(awayTeam.team.id) != -1) {
                    awayTitle += "#" + (top25Teams.indexOf(awayTeam.team.id)+1) + " "
                }
                awayTitle += awayTeam.team.displayName

                const leftDiv = document.getElementsByClassName("left")[0]
                const rightDiv = document.getElementsByClassName("right")[0]
                const leftHeader = document.createElement('h1')
                const rightHeader = document.createElement('h1')
                leftHeader.textContent = homeTitle
                rightHeader.textContent = awayTitle
                leftDiv.appendChild(leftHeader)
                rightDiv.appendChild(rightHeader)

                document.title = homeTeam.team.abbreviation + " vs " + awayTeam.team.abbreviation
                var officialTitle = awayTeam.team.displayName + " at " + homeTeam.team.displayName
                let gameInfo = null
                for (let element of gamesData.events) {
                    if (element.name === officialTitle) {
                        gameInfo = element
                        break
                    }
                }
                if(gameInfo) {
                    console.log(gameInfo)
                }

                var pre = false
                if (gameInfo.status.type.state === "pre") {
                    pre = true
                }
                generateSubHeading("h2", "Record:", [leftDiv, rightDiv])
                generateSubHeading("h3", `Overall: ${homeTeam.records[0].summary}`, leftDiv)
                generateSubHeading("h3", `Overall: ${awayTeam.records[0].summary}`, rightDiv)
                generateSubHeading("h3", `Home: ${homeTeam.records[1].summary}`, leftDiv)
                generateSubHeading("h3", `Home: ${awayTeam.records[1].summary}`, rightDiv)
                generateSubHeading("h3", `Away: ${homeTeam.records[2].summary}`, leftDiv)
                generateSubHeading("h3", `Away: ${awayTeam.records[2].summary}`, rightDiv)
                generateSubHeading("h3", `Vs. Conference: ${homeTeam.records[3].summary}`, leftDiv)
                generateSubHeading("h3", `Vs. Conference: ${awayTeam.records[3].summary}`, rightDiv)
                generateSubHeading("h2", "Stat Leaders:", [leftDiv, rightDiv])
                generateSubHeading("h3", `Passing: ${homeTeam.leaders[0].leaders[0].athlete.fullName}<br>${homeTeam.leaders[0].leaders[0].displayValue}`, leftDiv, homeTeam.leaders[0].leaders[0].athlete.headshot)
                generateSubHeading("h3", `Passing: ${awayTeam.leaders[0].leaders[0].athlete.fullName}<br>${awayTeam.leaders[0].leaders[0].displayValue}`, rightDiv, awayTeam.leaders[0].leaders[0].athlete.headshot)
                generateSubHeading("h3", `Rushing: ${homeTeam.leaders[1].leaders[0].athlete.fullName}<br>${homeTeam.leaders[1].leaders[0].displayValue}`, leftDiv, homeTeam.leaders[1].leaders[0].athlete.headshot)
                generateSubHeading("h3", `Rushing: ${awayTeam.leaders[1].leaders[0].athlete.fullName}<br>${awayTeam.leaders[1].leaders[0].displayValue}`, rightDiv, awayTeam.leaders[1].leaders[0].athlete.headshot)
                generateSubHeading("h3", `Recieving: ${homeTeam.leaders[2].leaders[0].athlete.fullName}<br>${homeTeam.leaders[2].leaders[0].displayValue}`, leftDiv, homeTeam.leaders[2].leaders[0].athlete.headshot)
                generateSubHeading("h3", `Recieving: ${awayTeam.leaders[2].leaders[0].athlete.fullName}<br>${awayTeam.leaders[2].leaders[0].displayValue}`, rightDiv, awayTeam.leaders[2].leaders[0].athlete.headshot)
            
                //const gameDetails = document.createElement('p')
                //gameDetails.textContent = "Here you can add more game details..."
                //detailsDiv.appendChild(gameDetails)
            }

            const generateSubHeading = (headerType, inputString, specifiedDiv, imgUrl = null) => {
                if (!specifiedDiv) {
                    console.error('specifiedDiv is undefined or null.');
                    return;
                }

                const items = Array.isArray(inputString) ? inputString : [inputString];
                items.forEach(item => {
                    const headers = Array.isArray(specifiedDiv) ? specifiedDiv : [specifiedDiv];
                    headers.forEach(head => {
                        if (!head) {
                            console.error('head is undefined or null.');
                            return;
                        }

                        const container = document.createElement('div');
                        container.style.display = 'flex';
                        container.style.alignItems = 'center';

                        if (imgUrl) {
                            const img = document.createElement('img');
                            img.src = imgUrl;
                            img.alt = 'Athlete headshot';
                            img.style.width = '200px'; // Adjust the size as needed
                            img.style.height = 'auto'; // Adjust the size as needed
                            img.style.marginRight = '10px'; // Space between image and text
                            container.appendChild(img);
                        }

                        const genDetails = document.createElement(headerType);
                        genDetails.innerHTML = item; // Use innerHTML to render <br> tags as HTML
                        container.appendChild(genDetails);

                        head.appendChild(container);
                    });
                });
            };

            const displayTable = (homeTeam, awayTeam) => {
                    const table = document.createElement('table')
                    table.style.border = "1px solid black"

                    const createRow = (data) => {
                        const row = document.createElement('tr')
                        data.forEach(item => {
                            const cell = document.createElement('td')
                            cell.style.border = "1px solid black"
                            cell.textContent = item
                            row.appendChild(cell)
                        })
                        return row
                    }

                    const quarterLabels = [
                        ...Array.from({ length: Math.min(homeTeam.linescores.length, 4) }, (_, i) => `Q${i + 1}`),
                        ...Array.from({ length: Math.max(homeTeam.linescores.length - 4, 0) }, (_, i) => `OT${i + 1}`)
                    ];
                    const tableFormat = ["Teams", ...quarterLabels, "Final"]
                    table.appendChild(createRow(tableFormat))

                    const homeFormat = [
                        homeTeam.team.abbreviation,
                        ...homeTeam.linescores.map(score => score.value),
                        homeTeam.score
                    ]
                    table.appendChild(createRow(homeFormat))

                    const awayFormat = [
                        awayTeam.team.abbreviation,
                        ...awayTeam.linescores.map(score => score.value),
                        awayTeam.score
                    ];
                    table.appendChild(createRow(awayFormat))

                    detailsDiv.appendChild(table)
                }

            // Retrieve data from localStorage
            const homeTeam = JSON.parse(localStorage.getItem('homeTeam'))
            const awayTeam = JSON.parse(localStorage.getItem('awayTeam'))
            // Ensure the data is valid
            if (homeTeam && awayTeam) {
                console.log(homeTeam)
                console.log(awayTeam)
                document.documentElement.style.setProperty('--home-team-color', `#${homeTeam.team.color}`)
                document.documentElement.style.setProperty('--home-team-alt', `#${homeTeam.team.alternateColor}`)
                document.documentElement.style.setProperty('--away-team-color', `#${awayTeam.team.color}`)
                document.documentElement.style.setProperty('--away-team-alt', `#${awayTeam.team.alternateColor}`)
                fetchTop25()
            }
        </script>
    </div>
    <button class="banner-button">General Details</button>
</body>
</html>
