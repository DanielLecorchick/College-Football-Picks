<!DOCTYPE html>
<html lang = "en">
<head>
    <meta charset = "UTF-8">
    <meta name = "viewport" content = "width = device-width, initial-scale = 1.0">
    <title>Game Details</title>
    <link rel="stylesheet" href="/css/details.css">
</head>
<body>
    <div id="details">
        <script>
            async function fetchTop25() {
                try{
                    // pulls all the top 25 teams and ranking data from the rankings API
                    const rankingsResponse = await fetch("https://site.api.espn.com/apis/site/v2/sports/football/college-football/rankings")
                    const rankingsData = await rankingsResponse.json()
                    const top25Teams = rankingsData.rankings[0].ranks.map(rank => rank.team.id)

                    // pulls game data such as match ups and times of games from the scorecoard API
                    //filepath to leaders = object/events/0/competitions/0/leaders
                    const gamesResponse = await fetch("https://site.api.espn.com/apis/site/v2/sports/football/college-football/scoreboard")
                    const gamesData = await gamesResponse.json()
                    console.log(gamesData)
                    
                    createDisplay(top25Teams, gamesData)
                }
                catch (error){
                    console.error("Error fetching data:", error)
                }
            }

            function createDisplay(top25Teams, gamesData) {
                // Set the webpage title and header
                var homeTitle = ""
                if (top25Teams.indexOf(homeTeam.team.id) != -1) {
                    homeTitle += "#" + (top25Teams.indexOf(homeTeam.team.id)+1) + " "
                }
                homeTitle += homeTeam.team.displayName
                
                var awayTitle = ""
                if (top25Teams.indexOf(awayTeam.team.id) != -1) {
                    awayTitle += "#" + (top25Teams.indexOf(awayTeam.team.id)+1) + " "
                }
                awayTitle += awayTeam.team.displayName

                document.title = homeTeam.team.abbreviation + " vs " + awayTeam.team.abbreviation
                var officialTitle = awayTeam.team.displayName + " at " + homeTeam.team.displayName
                let gameInfo = null
                for (let element of gamesData.events) {
                    if (element.name === officialTitle) {
                        gameInfo = element
                        break
                    }
                }
                if(gameInfo) {
                    console.log(gameInfo)
                }

                var pre = gameInfo.status.type.state === "pre";

                const detailsDiv = document.getElementById("details")

                const headerDiv = document.createElement("div")
                const homeDiv = document.createElement("div")
                const awayDiv = document.createElement("div")
                const generalDiv = document.createElement("div")

                headerDiv.className = "header-container"
                homeDiv.className = "data-container"
                awayDiv.className = "data-container"
                generalDiv.className = "data-container"

                generateSubHeading("header", "title-div", homeTitle, headerDiv, homeTeam.team.logo, "150px")
                const startDate = new Date(gameInfo.date)
                var formattedDate = startDate.toLocaleString("en-US", {
                    year: "numeric",
                    month: "short",
                    day: "numeric",
                    hour: "2-digit",
                    minute: "2-digit",
                    hour12: true,
                })
                formattedDate = formattedDate.replace(/, (\d{4})/, ' $1');
                const gameDate = formattedDate.replace(/(\b0)(\d{1}):/, "$2:")

                const tableDiv = document.createElement("div")
                tableDiv.className = "table-container"
                var usedTable = null
                if(!pre) {
                    // ◀ ▶
                    if(homeTeam.winner) {
                        generateSubHeading("arrow", "arrow-div-left", "◀", headerDiv)
                    }
                    usedTable = generateTable(homeTeam, awayTeam, gameInfo)
                    tableDiv.appendChild(usedTable)
                    headerDiv.appendChild(tableDiv)
                    if(awayTeam.winner) {
                        generateSubHeading("arrow", "arrow-div-right", "▶", headerDiv)
                    }
                }
                else {
                    generateSubHeading("header", "title-div", gameDate, headerDiv)
                }
                generateSubHeading("header", "title-div", awayTitle, headerDiv, awayTeam.team.logo, "150px")
                generateSubHeading("header", "title-div", homeTitle, homeDiv)
                generateSubHeading("header", "title-div", awayTitle, awayDiv)
                generateSubHeading("header", "title-div", "Game Info", generalDiv)
                generateSubHeading("info", "paragraph-div", "Game in progress...", homeDiv)
                generateSubHeading("info", "paragraph-div", "Game in progress...", awayDiv)
                generateSubHeading("info", "paragraph-div", "Game in progress...", generalDiv)

                const teamsDiv = document.createElement("div")
                teamsDiv.className = "ranks-div"
                teamsDiv.appendChild(homeDiv)
                teamsDiv.appendChild(generalDiv)
                teamsDiv.appendChild(awayDiv)

                detailsDiv.appendChild(headerDiv)
                detailsDiv.appendChild(teamsDiv)

                if(!pre) {
                    updateTable(tableDiv, homeTeam, awayTeam, gameInfo)
                }
            }

            const generateSubHeading = (headerType, inputClassName, inputString, specifiedDiv, imgUrl = null, imgSize = null) => {
                if (!specifiedDiv) {
                    console.error("specifiedDiv is undefined or null.")
                    return
                }

                const items = Array.isArray(inputString) ? inputString : [inputString]
                items.forEach(item => {
                    const headers = Array.isArray(specifiedDiv) ? specifiedDiv : [specifiedDiv]
                    headers.forEach(head => {
                        if (!head) {
                            console.error("head is undefined or null.")
                            return
                        }

                        const container = document.createElement("div")
                        container.className = inputClassName

                        if (imgUrl) {
                            const img = document.createElement("img")
                            img.src = imgUrl
                            img.alt = "Image"
                            if(imgSize) {
                                img.style.width = imgSize
                                img.style.height = "auto"
                            }
                            else {
                                img.style.width = "200px"
                                img.style.height = "auto"
                            }
                            img.style.marginRight = "10px"
                            container.appendChild(img)
                        }

                        const genDetails = document.createElement(headerType)
                        genDetails.innerHTML = item
                        container.appendChild(genDetails)

                        head.appendChild(container)
                    })
                })
            }

            const generateTable = (homeTeam, awayTeam, gameInfo) => {
                const table = document.createElement("table")

                const createRow = (data, rowType) => {
                    const row = document.createElement("tr")
                    data.forEach(item => {
                        let cell
                        if(rowType === "table") {
                            cell = document.createElement("fd")
                        }
                        else {
                            cell = document.createElement("td")  
                        }
                        cell.textContent = item
                        row.appendChild(cell)
                    })
                    return row
                }

                const quarterLabels = [
                    ...Array.from({ length: Math.min(homeTeam.linescores.length, 4) }, (_, i) => `Q${i + 1}`),
                    ...Array.from({ length: Math.max(homeTeam.linescores.length - 4, 0) }, (_, i) => `OT${i + 1}`)
                ]
                var tableFormat = null
                if(gameInfo.competitions[0].status.type.state === "in") {
                    tableFormat = ["", ...quarterLabels, "T"]
                }
                else {
                    tableFormat = ["", ...quarterLabels, "Final"]
                }
                table.appendChild(createRow(tableFormat, "table"))

                const homeFormat = [
                    homeTeam.team.abbreviation,
                    ...homeTeam.linescores.map(score => score.value),
                    homeTeam.score
                ]
                table.appendChild(createRow(homeFormat))

                const awayFormat = [
                    awayTeam.team.abbreviation,
                    ...awayTeam.linescores.map(score => score.value),
                    awayTeam.score
                ]
                table.appendChild(createRow(awayFormat))

                return table;  // Return the generated table here
            }

            const updateTable = (tableDiv, homeTeam, awayTeam, gameInfo) => {
                console.log("updating table")
                tableDiv.innerHTML = "";
                const newTable = generateTable(homeTeam, awayTeam, gameInfo);
                tableDiv.appendChild(newTable);
            }


            // Retrieve data from localStorage
            const homeTeam = JSON.parse(localStorage.getItem("homeTeam"))
            const awayTeam = JSON.parse(localStorage.getItem("awayTeam"))
            // Ensure the data is valid
            if (homeTeam && awayTeam) {
                console.log(homeTeam)
                console.log(awayTeam)
                document.documentElement.style.setProperty("--home-team-color", `#${homeTeam.team.color}`)
                document.documentElement.style.setProperty("--home-team-alt", `#${homeTeam.team.alternateColor}`)
                document.documentElement.style.setProperty("--away-team-color", `#${awayTeam.team.color}`)
                document.documentElement.style.setProperty("--away-team-alt", `#${awayTeam.team.alternateColor}`)
                fetchTop25()
            }
        </script>
    </div>
</body>
</html>
