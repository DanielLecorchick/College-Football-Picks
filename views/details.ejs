<!DOCTYPE html>
<html lang = "en">
<head>
    <meta charset = "UTF-8">
    <meta name = "viewport" content = "width = device-width, initial-scale = 1.0">
    <title>Game Details</title>
    <link rel="stylesheet" href="/css/details.css">
</head>
<body>
    <div id="details">
        <script>
            async function fetchTop25() {
                try{
                    // pulls all the top 25 teams and ranking data from the rankings API
                    const rankingsResponse = await fetch("https://site.api.espn.com/apis/site/v2/sports/football/college-football/rankings")
                    const rankingsData = await rankingsResponse.json()
                    const top25Teams = rankingsData.rankings[0].ranks.map(rank => rank.team.id)

                    // pulls game data such as match ups and times of games from the scorecoard API
                    //filepath to leaders = object/events/0/competitions/0/leaders
                    const gamesResponse = await fetch("https://site.api.espn.com/apis/site/v2/sports/football/college-football/scoreboard")
                    const gamesData = await gamesResponse.json()
                    console.log(gamesData)
                    createDisplay(top25Teams, gamesData)
                }
                catch (error){
                    console.error("Error fetching data:", error)
                }
            }

            function createDisplay(top25Teams, gamesData) {
                // Set the webpage title and header
                var homeTitle = ""
                if (top25Teams.indexOf(homeTeam.team.id) != -1) {
                    homeTitle += "#" + (top25Teams.indexOf(homeTeam.team.id)+1) + " "
                }
                homeTitle += homeTeam.team.displayName
                
                var awayTitle = ""
                if (top25Teams.indexOf(awayTeam.team.id) != -1) {
                    awayTitle += "#" + (top25Teams.indexOf(awayTeam.team.id)+1) + " "
                }
                awayTitle += awayTeam.team.displayName

                document.title = homeTeam.team.abbreviation + " vs " + awayTeam.team.abbreviation
                var officialTitle = awayTeam.team.displayName + " at " + homeTeam.team.displayName
                let gameInfo = null
                for (let element of gamesData.events) {
                    if (element.name === officialTitle) {
                        gameInfo = element
                        break
                    }
                }
                if(gameInfo) {
                    console.log(gameInfo)
                }

                var pre = false
                if (gameInfo.status.type.state === "pre") {
                    pre = true
                }

                const detailsDiv = document.getElementById("details")

                const homeDiv = document.createElement("div")
                const awayDiv = document.createElement("div")
                const generalDiv = document.createElement("div")

                homeDiv.className = "data-container"
                awayDiv.className = "data-container"
                generalDiv.className = "data-container"

                const homeHeader = document.createElement("h1")
                const awayHeader = document.createElement("h1")
                const generalHeader = document.createElement("h1")

                homeHeader.textContent = homeTitle
                awayHeader.textContent = awayTitle
                generalHeader.textContent = "General Info"

                homeDiv.appendChild(homeHeader)
                awayDiv.appendChild(awayHeader)
                generalDiv.appendChild(generalHeader)

                detailsDiv.appendChild(homeDiv)
                detailsDiv.appendChild(generalDiv)
                detailsDiv.appendChild(awayDiv)
            }

            const generateSubHeading = (headerType, inputString, specifiedDiv, imgUrl = null, imgSize = null) => {
                if (!specifiedDiv) {
                    console.error('specifiedDiv is undefined or null.')
                    return
                }

                const items = Array.isArray(inputString) ? inputString : [inputString]
                items.forEach(item => {
                    const headers = Array.isArray(specifiedDiv) ? specifiedDiv : [specifiedDiv]
                    headers.forEach(head => {
                        if (!head) {
                            console.error('head is undefined or null.')
                            return
                        }

                        const container = document.createElement('div')
                        container.style.display = 'flex'
                        container.style.alignItems = 'center'

                        if (imgUrl) {
                            const img = document.createElement('img')
                            img.src = imgUrl
                            img.alt = 'Athlete headshot'
                            if(imgSize) {
                                img.style.width = imgSize
                                img.style.height = 'auto'
                            }
                            else {
                                img.style.width = '200px'
                                img.style.height = 'auto'
                            }
                            img.style.marginRight = '10px'
                            container.appendChild(img)
                        }

                        const genDetails = document.createElement(headerType)
                        genDetails.innerHTML = item
                        container.appendChild(genDetails)

                        head.appendChild(container)
                    })
                })
            }

            const displayTable = (homeTeam, awayTeam, specifiedDiv) => {
                    const table = document.createElement('table')
                    table.style.border = "1px solid black"

                    const createRow = (data) => {
                        const row = document.createElement('tr')
                        data.forEach(item => {
                            const cell = document.createElement('td')
                            cell.style.border = "1px solid black"
                            cell.textContent = item
                            row.appendChild(cell)
                        })
                        return row
                    }

                    const quarterLabels = [
                        ...Array.from({ length: Math.min(homeTeam.linescores.length, 4) }, (_, i) => `Q${i + 1}`),
                        ...Array.from({ length: Math.max(homeTeam.linescores.length - 4, 0) }, (_, i) => `OT${i + 1}`)
                    ]
                    const tableFormat = ["Teams", ...quarterLabels, "Final"]
                    table.appendChild(createRow(tableFormat))

                    const homeFormat = [
                        homeTeam.team.abbreviation,
                        ...homeTeam.linescores.map(score => score.value),
                        homeTeam.score
                    ]
                    table.appendChild(createRow(homeFormat))

                    const awayFormat = [
                        awayTeam.team.abbreviation,
                        ...awayTeam.linescores.map(score => score.value),
                        awayTeam.score
                    ]
                    table.appendChild(createRow(awayFormat))

                    specifiedDiv.appendChild(table)
                }

            // Retrieve data from localStorage
            const homeTeam = JSON.parse(localStorage.getItem('homeTeam'))
            const awayTeam = JSON.parse(localStorage.getItem('awayTeam'))
            // Ensure the data is valid
            if (homeTeam && awayTeam) {
                console.log(homeTeam)
                console.log(awayTeam)
                document.documentElement.style.setProperty('--home-team-color', `#${homeTeam.team.color}`)
                document.documentElement.style.setProperty('--home-team-alt', `#${homeTeam.team.alternateColor}`)
                document.documentElement.style.setProperty('--away-team-color', `#${awayTeam.team.color}`)
                document.documentElement.style.setProperty('--away-team-alt', `#${awayTeam.team.alternateColor}`)
                fetchTop25()
            }
        </script>
    </div>
</body>
</html>
