<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= viewingUser.username %> Profile</title>
    <link rel="stylesheet" href="/css/profile.css">
    <link rel="stylesheet" href="/css/shared-styles.css">
</head>
<body>
    <%- include("header", { headText: undefined }) %>
    <div id="profile"></div>
    <script>
        async function fetchTeamLogo(teamId) {
            try{
                const teamResponse = await fetch(`https://site.api.espn.com/apis/site/v2/sports/football/college-football/teams/${teamId}`)
                const teamData = await teamResponse.json()

                return teamData.team.logos[0].href
            }
            catch (error){
                console.error("Error fetching data:", error)
            }
        }

        async function renderPage() {
            const currentUserId = "<%= user._id %>"
            const viewingUserId = "<%= viewingUser._id %>"
            const friendsListIDS = <%- JSON.stringify(viewingUser.friendsList) %>
            const friendRequestsIDS = <%- JSON.stringify(viewingUser.friendRequests) %>

            console.log(friendsListIDS)
            console.log(friendRequestsIDS)

            const headerDiv = document.getElementById("header")
            const nameText = document.createElement("head-text")
            nameText.textContent = `${"<%= viewingUser.username %>"} Profile`

            const nameImg = document.createElement("img")
            nameImg.src = await fetchTeamLogo(<%= viewingUser.favoriteTeam %>)
            nameImg.style.height = "10vh"
            nameImg.style.width = "auto"
            headerDiv.appendChild(nameImg)
            headerDiv.appendChild(nameText)

            const profileDiv = document.getElementById("profile")

            if(viewingUserId !== currentUserId) {
                const friendButton = document.createElement("button")
                if(friendsListIDS.includes(currentUserId) || friendRequestsIDS.includes(currentUserId)) {
                    friendButton.className = "remove-friend-button"
                    friendButton.title = "Cancel Friend Request"
                    friendButton.onclick = async () => {
                        try {
                            // API call to add the friend
                            const response = await fetch("/api/remove-friend", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({currentUserId, viewingUserId})
                            })
                            if (response.ok) {
                                const data = await response.json()
                                if (data.success) {
                                    window.location.href = `/profiles-user-id=${viewingUserId}`
                                }
                            }
                            else {
                                const errorData = await response.json()
                                console.error(errorData.error || "An error occurred.")
                                alert(errorData.error || "An error occurred. Please try again later.")
                            }
                        } 
                        catch (error) {
                            console.error("Error handling removing friend:", error)
                            alert("An error occurred. Please try again later.")
                        }
                    }
                }
                else {
                    friendButton.className = "friend-button"
                    friendButton.title = "Send Friend Request"
                    friendButton.onclick = async () => {
                        try {
                            const response = await fetch("/api/add-friend", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({currentUserId, viewingUserId})
                            })
                            if (response.ok) {
                                const data = await response.json()
                                if (data.success) {
                                    window.location.href = `/profiles-user-id=${viewingUserId}`
                                }
                            }
                            else {
                                const errorData = await response.json()
                                console.error(errorData.error || "An error occurred.")
                                alert(errorData.error || "An error occurred. Please try again later.")
                            }
                        } 
                        catch (error) {
                            console.error("Error handling friend request:", error)
                            alert("An error occurred. Please try again later.")
                        }
                    }
                }
                headerDiv.appendChild(friendButton)

                const friendsBox = createDetailsBox(
                    ["Friends List"],
                    [container => appendFriendsList(container)]
                )

                const leaderboardsBox = createDetailsBox(
                    ["Owned Leaderboards", "Joined Leaderboards"],
                    [
                        container => appendOwnLeaderboards(container),
                        container => appendMemberLeaderboards(container)
                    ]
                )

                profileDiv.appendChild(friendsBox)
                profileDiv.appendChild(leaderboardsBox)
            }
            if(viewingUserId === currentUserId) {
                const settingsButton = document.createElement("button")
                settingsButton.className = "settings-button"
                settingsButton.title = "Edit Account"
                settingsButton.onclick = () => {
                    window.location.href = `/edit-account`
                }
                headerDiv.appendChild(settingsButton)

                const friendsBox = createDetailsBox(
                    ["Friends List", "Friend Requests"],
                    [
                        container => appendFriendsList(container),
                        container => appendFriendRequests(container),
                    ]
                )

                const leaderboardsBox = createDetailsBox(
                    ["Owned Leaderboards", "Joined Leaderboards", "Leaderboard Invites"],
                    [
                        container => appendOwnLeaderboards(container),
                        container => appendMemberLeaderboards(container),
                        container => appendLeaderboardInvites(container)
                    ]
                )

                const textBox = createDetailsBox(
                    ["Test header"], [container => appendFriendsList(container)]
                )

                profileDiv.appendChild(friendsBox)
                profileDiv.appendChild(leaderboardsBox)
                profileDiv.appendChild(textBox)
            }
        }

        function createDetailsBox(headers, contentFunctions = []) {
            const detailsBox = document.createElement("div")
            detailsBox.className = "details-box"

            const detailsBoxHeader = document.createElement("div")
            detailsBoxHeader.className = "details-box-header"

            headers.forEach((headerText, index) => {
                const tabHeader = document.createElement("div")
                tabHeader.className = "tab-header"
                tabHeader.textContent = headerText
                tabHeader.dataset.target = `tab-content-${index + 1}`

                // Set the first tab as active by default
                if (index === 0) {
                    tabHeader.classList.add("active-tab")
                }

                detailsBoxHeader.appendChild(tabHeader)
            })

            detailsBox.appendChild(detailsBoxHeader) // Append the header before content

            headers.forEach((_, index) => {
                // Create corresponding tab content container
                const contentDiv = document.createElement("div")
                contentDiv.className = `tab-content tab-content-${index + 1}`
                if (index !== 0) contentDiv.classList.add("hidden")

                // Call provided content function if it exists
                if (contentFunctions[index]) {
                    contentFunctions[index](contentDiv)
                }

                detailsBox.appendChild(contentDiv)
            })

            // Add the tab-switching functionality
            detailsBoxHeader.addEventListener("click", function (e) {
                if (e.target.classList.contains("tab-header")) {
                    // Get the target content from the clicked tab
                    const targetContentClass = e.target.dataset.target

                    // Hide all tab contents
                    detailsBox.querySelectorAll(".tab-content").forEach(content => {
                        content.classList.add("hidden")
                    })

                    // Show the selected tab content
                    const targetContent = detailsBox.querySelector(`.${targetContentClass}`)
                    if (targetContent) {
                        targetContent.classList.remove("hidden")
                    }

                    // Highlight the active tab
                    detailsBox.querySelectorAll(".tab-header").forEach(tab => {
                        tab.classList.remove("active-tab")
                    })
                    e.target.classList.add("active-tab")

                    detailsBox.querySelectorAll(".tab-header").forEach(tab => {
                        tab.style.borderRight = ""
                        tab.style.borderLeft = ""
                        tab.style.borderBottomRightRadius = ""
                        tab.style.borderBottomLeftRadius = ""
                    })

                    const activeTab = detailsBox.querySelector(".tab-header.active-tab")
                    const prevTab = activeTab.previousElementSibling

                    // Apply styles to the previous tab
                    if (prevTab) {
                        prevTab.style.borderRight = "1px solid black"
                        prevTab.style.borderLeft = "none"
                        prevTab.style.borderBottomRightRadius = "10px"
                        prevTab.style.borderBottomLeftRadius = "0px"
                    }
                }
            })

            return detailsBox
        }

        async function createProfileElements(friend) {
            const profileLink = document.createElement("a")
            profileLink.className = "profile-link"
            profileLink.href = `/profiles-user-id=${friend._id}`

            const logo = document.createElement("img")
            logo.src = await fetchTeamLogo(friend.favoriteTeam)
            logo.style.height = "8vh"
            logo.style.width = "auto"
            profileLink.appendChild(logo)

            const nameDiv = document.createElement("div")
            nameDiv.className = "name-div"

            const userName = document.createElement("span")
            userName.className = "user-name"
            userName.textContent = `${friend.username}`

            const displayName = document.createElement("display-name")
            displayName.textContent = `${friend.firstName} ${friend.lastName}`

            nameDiv.appendChild(userName)
            nameDiv.appendChild(displayName)

            return { profileLink, nameDiv }
        }

        // Helper function to create buttons (Accept/Decline/Remove)
        function createButton(className, title, action) {
            const button = document.createElement("button")
            button.className = className
            button.title = title
            button.onclick = action
            return button
        }

        // Helper function for handling API requests
        async function handleFriendAction(url, currentUserId, friendId) {
            try {
                const response = await fetch(url, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ currentUserId, viewingUserId: friendId })
                })

                const data = await response.json()
                if (data.success) {
                    window.location.href = `/profiles-user-id=${currentUserId}`
                } else {
                    throw new Error(data.error || "An error occurred.")
                }
            } catch (error) {
                console.error(error)
                alert(error.message || "An error occurred. Please try again later.")
            }
        }

        // General function to handle both friends and friend requests
        async function appendList(container, list, actionType) {
            const currentUserId = "<%= user._id %>"
            const currentUser = currentUserId === "<%= viewingUser._id %>"

            if (list.length === 0) {
                container.textContent = actionType === "friend" ? "No Friends" : "No Friend Requests"
                return
            }

            const elements = await Promise.all(list.map(async (friend) => {
                const friendElement = document.createElement("div")
                friendElement.className = "list-element"

                const { profileLink, nameDiv } = await createProfileElements(friend)
                friendElement.appendChild(profileLink)
                friendElement.appendChild(nameDiv)

                if (actionType === "friend" && currentUser) {
                    const buttonContainer = document.createElement("div")
                    buttonContainer.className = "button-container"

                    const removeButton = createButton("remove-friend-button", "Remove Friend", () => handleFriendAction("/api/remove-friend", currentUserId, friend._id))
                    buttonContainer.appendChild(removeButton)
                    friendElement.appendChild(buttonContainer)
                }

                if (actionType === "request") {
                    const buttonContainer = document.createElement("div")
                    buttonContainer.className = "button-container"

                    const addButton = createButton("friend-button", "Accept Request", () => handleFriendAction("/api/add-friend", currentUserId, friend._id))
                    buttonContainer.appendChild(addButton)

                    const removeButton = createButton("remove-friend-button", "Decline Request", () => handleFriendAction("/api/remove-friend", currentUserId, friend._id))
                    buttonContainer.appendChild(removeButton)

                    friendElement.appendChild(buttonContainer)
                }

                return friendElement
            }))

            elements.forEach(element => container.appendChild(element))
        }

        // Function to append friend requests
        async function appendFriendRequests(container) {
            const friendRequests = <%- JSON.stringify(friendRequests) %>
            await appendList(container, friendRequests, "request")
        }

        // Function to append friends list
        async function appendFriendsList(container) {
            const friendsList = <%- JSON.stringify(friendsList) %>
            await appendList(container, friendsList, "friend")
        }

        async function appendLeaderboards(container, leaderboardsData, currentUser) {
            if (leaderboardsData.length === 0) {
                const emptyText = document.createElement("span")
                emptyText.textContent = "No Leaderboards"
                container.appendChild(emptyText)
                return
            }

            const leaderboardElements = await Promise.all(leaderboardsData.map(async (leaderboard) => {
                console.log(leaderboard)
                const leaderboardElement = document.createElement("div")
                leaderboardElement.className = "list-element"

                const leaderboardLink = document.createElement("a")
                leaderboardLink.className = "profile-link"
                leaderboardLink.href = `/leaderboards-id=${leaderboard._id}`

                const logo = document.createElement("img")
                logo.src = await fetchTeamLogo(leaderboard.profileImage)
                logo.style.height = "8vh"
                logo.style.width = "auto"
                leaderboardLink.appendChild(logo)

                const nameDiv = document.createElement("div")
                nameDiv.className = "name-div"
                const leaderboardName = document.createElement("leaderboard-header")
                leaderboardName.className = "user-name"
                leaderboardName.textContent = `${leaderboard.name}`
                nameDiv.appendChild(leaderboardName)

                leaderboardElement.appendChild(leaderboardLink)
                leaderboardElement.appendChild(nameDiv)

                const buttonContainer = document.createElement("div")
                buttonContainer.className = "button-container"

                const dynamicButton = document.createElement("button")

                // Logic for the dynamic button
                if (currentUser) {
                    // For owned leaderboards (Edit button)
                    dynamicButton.className = "edit-button"
                    dynamicButton.title = "Edit Details"
                    buttonContainer.appendChild(dynamicButton)
                    dynamicButton.onclick = async () => {
                        window.location.href = `/edit-leaderboard-id=${leaderboard._id}`
                    }
                } else {
                    if (leaderboardsData === <%- JSON.stringify(userMemberLeaderboards) %>) {
                        // For member leaderboards, only show the join button if the currentUser is not part of it
                        dynamicButton.className = "join-button"
                        dynamicButton.title = "Request to Join"
                        buttonContainer.appendChild(dynamicButton)
                        dynamicButton.onclick = async () => {
                            try {
                                const response = await fetch("/api/join-leaderboard", {
                                    method: "POST",
                                    headers: { "Content-Type": "application/json" },
                                    body: JSON.stringify({ currentUserId: currentUser._id, leaderboardId: leaderboard._id })
                                })
                                const data = await response.json()
                                if (data.success) {
                                    window.location.href = `/profiles-user-id=${currentUserId}`
                                }
                            } catch (error) {
                                console.error(error)
                                alert("An error occurred. Please try again later.")
                            }
                        }
                    } else if (leaderboardsData === <%- JSON.stringify(userLeaderboardInvites) %>) {
                        // For leaderboard invites, show both join and leave buttons
                        const joinButton = document.createElement("button")
                        joinButton.className = "join-button"
                        joinButton.title = "Accept Invite"
                        buttonContainer.appendChild(joinButton)
                        joinButton.onclick = async () => {
                            try {
                                const response = await fetch("/api/join-leaderboard", {
                                    method: "POST",
                                    headers: { "Content-Type": "application/json" },
                                    body: JSON.stringify({ currentUserId: currentUser._id, leaderboardId: leaderboard._id })
                                })
                                const data = await response.json()
                                if (data.success) {
                                    window.location.href = `/profiles-user-id=${currentUserId}`
                                }
                            } catch (error) {
                                console.error(error)
                                alert("An error occurred. Please try again later.")
                            }
                        }

                        const leaveButton = document.createElement("button")
                        leaveButton.className = "minus-button"
                        leaveButton.title = "Decline Invite"
                        buttonContainer.appendChild(leaveButton)
                        leaveButton.onclick = async () => {
                            try {
                                const response = await fetch("/api/leave-leaderboard", {
                                    method: "POST",
                                    headers: { "Content-Type": "application/json" },
                                    body: JSON.stringify({ currentUserId: currentUser._id, leaderboardId: leaderboard._id })
                                })
                                const data = await response.json()
                                if (data.success) {
                                    window.location.href = `/profiles-user-id=${currentUserId}`
                                }
                            } catch (error) {
                                console.error(error)
                                alert("An error occurred. Please try again later.")
                            }
                        }
                    }
                }

                leaderboardElement.appendChild(buttonContainer)
                return leaderboardElement
            }))

            leaderboardElements.forEach(element => container.appendChild(element))
        }

        // Function for appending owned leaderboards
        async function appendOwnLeaderboards(container) {
            const currentUserId = "<%= user._id %>"
            const currentUser = currentUserId === "<%= viewingUser._id %>"
            const ownLeaderboards = <%- JSON.stringify(userOwnedLeaderboards) %>
            await appendLeaderboards(container, ownLeaderboards, currentUser)

            if(currentUser) {
                const leaderboardElement = document.createElement("div")
                leaderboardElement.className = "list-final"

                const leaderboardLink = document.createElement("a")
                leaderboardLink.className = "create-link"
                leaderboardLink.href = "/create-leaderboard"
                leaderboardLink.title = "Create New Leaderboard"

                const createImage = document.createElement("icon")
                createImage.className = "join-button"

                leaderboardLink.appendChild(createImage)
                leaderboardElement.appendChild(leaderboardLink)
                container.appendChild(leaderboardElement)
            }
        }

        // Function for appending member leaderboards
        async function appendMemberLeaderboards(container) {
            const currentUserId = "<%= user._id %>"
            const currentUser = currentUserId === "<%= viewingUser._id %>"
            const memberLeaderboards = <%- JSON.stringify(userMemberLeaderboards) %>
            await appendLeaderboards(container, memberLeaderboards, currentUser)
        }

        // Function for appending leaderboard invites
        async function appendLeaderboardInvites(container) {
            const currentUserId = "<%= user._id %>"
            const currentUser = currentUserId === "<%= viewingUser._id %>"
            const leaderboardInvites = <%- JSON.stringify(userLeaderboardInvites) %>
            await appendLeaderboards(container, leaderboardInvites, currentUser)
        }

        renderPage()

    </script>
</body>
</html>